将SQL DDL转换为Mermaid描述的ER图需要对DDL进行解析，并识别出实体、属性、主键、外键以及它们之间的关系。以下是一些步骤和提示词，可以帮助你完成这个过程：

1. **解析实体**：
   - 识别DDL中定义的每个表，这些表在ER图中表示为实体。

2. **识别属性**：
   - 列出每个实体的所有列，这些列在ER图中表示为属性。

3. **确定主键**：
   - 找出每个实体的主键，它在ER图中用来唯一标识实体。

4. **识别外键**：
   - 确定哪些列是外键，它们在ER图中表示实体之间的关系。

5. **定义关系**：
   - 根据外键定义实体之间的关系，如一对一、一对多或多对多。

6. **使用Mermaid语法**：
   - 使用Mermaid的`erDiagram`语法来创建ER图。

7. **实体和属性表示**：
   - 使用`entityName { attribute1, attribute2, ... }`格式表示每个实体及其属性。

8. **关系表示**：
   - 使用`entityA ||--o{ entityB : "relationship"`来表示一对多关系，其中`o`表示多的一端，`||`表示一对一关系。

9. **主键和外键**：
   - 使用`PK`和`FK`来表示主键和外键。

10. **索引和约束**：
    - 可以使用注释或附加文本来表示索引和约束。

11. **递归和继承**：
    - 如果存在递归或继承关系，使用相应的Mermaid语法表示。

12. **弱实体集**：
    - 如果存在弱实体集，使用虚线框和连接到强实体集的线表示。

13. **角色扮演**：
    - 如果实体扮演不同角色，使用不同的线和标签来区分。

14. **生成Mermaid代码**：
    - 将上述信息转换为Mermaid代码。

以下是一个简化的示例，展示如何将SQL DDL转换为Mermaid ER图代码：

```mermaid
erDiagram
    USER ||--o{ ACCOUNT : "has"
    ACCOUNT ||--o{ TRANSACTION : "performs"
    ACCOUNT {
        int id PK "User ID"
        string username
        string email
    }
    TRANSACTION {
        int id PK "Transaction ID"
        int account_id FK
        decimal amount
        timestamp date
    }
    USER {
        int id PK "Account ID"
        string name
    }
```

在这个示例中，`USER`和`ACCOUNT`是一对一关系，`ACCOUNT`和`TRANSACTION`是一对多关系。每个实体的属性和主键/外键都已列出。

请根据下面的DDL，按照上面的模式来创建新的Mermaid ER图 代码。


-- public.apps definition

-- Drop table

-- DROP TABLE public.apps;

CREATE TABLE public.apps (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	tenant_id uuid NOT NULL,
	"name" varchar(255) NOT NULL,
	"mode" varchar(255) NOT NULL,
	icon varchar(255) NULL,
	icon_background varchar(255) NULL,
	app_model_config_id uuid NULL,
	status varchar(255) DEFAULT 'normal'::character varying NOT NULL,
	enable_site bool NOT NULL,
	enable_api bool NOT NULL,
	api_rpm int4 DEFAULT 0 NOT NULL,
	api_rph int4 DEFAULT 0 NOT NULL,
	is_demo bool DEFAULT false NOT NULL,
	is_public bool DEFAULT false NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	is_universal bool DEFAULT false NOT NULL,
	workflow_id uuid NULL,
	description text DEFAULT ''::character varying NOT NULL,
	CONSTRAINT app_pkey PRIMARY KEY (id)
);
CREATE INDEX app_tenant_id_idx ON public.apps USING btree (tenant_id);


-- public.app_model_configs definition

-- Drop table

-- DROP TABLE public.app_model_configs;

CREATE TABLE public.app_model_configs (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	app_id uuid NOT NULL,
	provider varchar(255) NULL,
	model_id varchar(255) NULL,
	configs json NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	opening_statement text NULL,
	suggested_questions text NULL,
	suggested_questions_after_answer text NULL,
	more_like_this text NULL,
	model text NULL,
	user_input_form text NULL,
	pre_prompt text NULL,
	agent_mode text NULL,
	speech_to_text text NULL,
	sensitive_word_avoidance text NULL,
	retriever_resource text NULL,
	dataset_query_variable varchar(255) NULL,
	prompt_type varchar(255) DEFAULT 'simple'::character varying NOT NULL,
	chat_prompt_config text NULL,
	completion_prompt_config text NULL,
	dataset_configs text NULL,
	external_data_tools text NULL,
	file_upload text NULL,
	text_to_speech text NULL,
	CONSTRAINT app_model_config_pkey PRIMARY KEY (id)
);
CREATE INDEX app_app_id_idx ON public.app_model_configs USING btree (app_id);


-- public.app_dataset_joins definition

-- Drop table

-- DROP TABLE public.app_dataset_joins;

CREATE TABLE public.app_dataset_joins (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	app_id uuid NOT NULL,
	dataset_id uuid NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT app_dataset_join_pkey PRIMARY KEY (id)
);
CREATE INDEX app_dataset_join_app_dataset_idx ON public.app_dataset_joins USING btree (dataset_id, app_id);


-- public.app_annotation_settings definition

-- Drop table

-- DROP TABLE public.app_annotation_settings;

CREATE TABLE public.app_annotation_settings (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	app_id uuid NOT NULL,
	score_threshold float8 DEFAULT 0 NOT NULL,
	collection_binding_id uuid NOT NULL,
	created_user_id uuid NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_user_id uuid NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	CONSTRAINT app_annotation_settings_pkey PRIMARY KEY (id)
);
CREATE INDEX app_annotation_settings_app_idx ON public.app_annotation_settings USING btree (app_id);

-- public.app_annotation_hit_histories definition

-- Drop table

-- DROP TABLE public.app_annotation_hit_histories;

CREATE TABLE public.app_annotation_hit_histories (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	app_id uuid NOT NULL,
	annotation_id uuid NOT NULL,
	"source" text NOT NULL,
	question text NOT NULL,
	account_id uuid NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	score float8 DEFAULT 0 NOT NULL,
	message_id uuid NOT NULL,
	annotation_question text NOT NULL,
	annotation_content text NOT NULL,
	CONSTRAINT app_annotation_hit_histories_pkey PRIMARY KEY (id)
);
CREATE INDEX app_annotation_hit_histories_account_idx ON public.app_annotation_hit_histories USING btree (account_id);
CREATE INDEX app_annotation_hit_histories_annotation_idx ON public.app_annotation_hit_histories USING btree (annotation_id);
CREATE INDEX app_annotation_hit_histories_app_idx ON public.app_annotation_hit_histories USING btree (app_id);
CREATE INDEX app_annotation_hit_histories_message_idx ON public.app_annotation_hit_histories USING btree (message_id);


-- public.tenants definition

-- Drop table

-- DROP TABLE public.tenants;

CREATE TABLE public.tenants (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	"name" varchar(255) NOT NULL,
	encrypt_public_key text NULL,
	plan varchar(255) DEFAULT 'basic'::character varying NOT NULL,
	status varchar(255) DEFAULT 'normal'::character varying NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	custom_config text NULL,
	CONSTRAINT tenant_pkey PRIMARY KEY (id)
);


-- public.tenant_preferred_model_providers definition

-- Drop table

-- DROP TABLE public.tenant_preferred_model_providers;

CREATE TABLE public.tenant_preferred_model_providers (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	tenant_id uuid NOT NULL,
	provider_name varchar(40) NOT NULL,
	preferred_provider_type varchar(40) NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	CONSTRAINT tenant_preferred_model_provider_pkey PRIMARY KEY (id)
);
CREATE INDEX tenant_preferred_model_provider_tenant_provider_idx ON public.tenant_preferred_model_providers USING btree (tenant_id, provider_name);


-- public.tenant_default_models definition

-- Drop table

-- DROP TABLE public.tenant_default_models;

CREATE TABLE public.tenant_default_models (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	tenant_id uuid NOT NULL,
	provider_name varchar(40) NOT NULL,
	model_name varchar(255) NOT NULL,
	model_type varchar(40) NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	CONSTRAINT tenant_default_model_pkey PRIMARY KEY (id)
);
CREATE INDEX tenant_default_model_tenant_id_provider_type_idx ON public.tenant_default_models USING btree (tenant_id, provider_name, model_type);

-- public.tenant_account_joins definition

-- Drop table

-- DROP TABLE public.tenant_account_joins;

CREATE TABLE public.tenant_account_joins (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	tenant_id uuid NOT NULL,
	account_id uuid NOT NULL,
	"role" varchar(16) DEFAULT 'normal'::character varying NOT NULL,
	invited_by uuid NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	"current" bool DEFAULT false NOT NULL,
	CONSTRAINT tenant_account_join_pkey PRIMARY KEY (id),
	CONSTRAINT unique_tenant_account_join UNIQUE (tenant_id, account_id)
);
CREATE INDEX tenant_account_join_account_id_idx ON public.tenant_account_joins USING btree (account_id);
CREATE INDEX tenant_account_join_tenant_id_idx ON public.tenant_account_joins USING btree (tenant_id);


-- public.accounts definition

-- Drop table

-- DROP TABLE public.accounts;

CREATE TABLE public.accounts (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	"name" varchar(255) NOT NULL,
	email varchar(255) NOT NULL,
	"password" varchar(255) NULL,
	password_salt varchar(255) NULL,
	avatar varchar(255) NULL,
	interface_language varchar(255) NULL,
	interface_theme varchar(255) NULL,
	timezone varchar(255) NULL,
	last_login_at timestamp NULL,
	last_login_ip varchar(255) NULL,
	status varchar(16) DEFAULT 'active'::character varying NOT NULL,
	initialized_at timestamp NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	last_active_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	CONSTRAINT account_pkey PRIMARY KEY (id)
);
CREATE INDEX account_email_idx ON public.accounts USING btree (email);


-- public.account_integrates definition

-- Drop table

-- DROP TABLE public.account_integrates;

CREATE TABLE public.account_integrates (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	account_id uuid NOT NULL,
	provider varchar(16) NOT NULL,
	open_id varchar(255) NOT NULL,
	encrypted_token varchar(255) NOT NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	CONSTRAINT account_integrate_pkey PRIMARY KEY (id),
	CONSTRAINT unique_account_provider UNIQUE (account_id, provider),
	CONSTRAINT unique_provider_open_id UNIQUE (provider, open_id)
);


-- public.conversations definition

-- Drop table

-- DROP TABLE public.conversations;

CREATE TABLE public.conversations (
	id uuid DEFAULT uuid_generate_v4() NOT NULL,
	app_id uuid NOT NULL,
	app_model_config_id uuid NULL,
	model_provider varchar(255) NULL,
	override_model_configs text NULL,
	model_id varchar(255) NULL,
	"mode" varchar(255) NOT NULL,
	"name" varchar(255) NOT NULL,
	summary text NULL,
	inputs json NULL,
	introduction text NULL,
	system_instruction text NULL,
	system_instruction_tokens int4 DEFAULT 0 NOT NULL,
	status varchar(255) NOT NULL,
	from_source varchar(255) NOT NULL,
	from_end_user_id uuid NULL,
	from_account_id uuid NULL,
	read_at timestamp NULL,
	read_account_id uuid NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP(0) NOT NULL,
	is_deleted bool DEFAULT false NOT NULL,
	invoke_from varchar(255) NULL,
	CONSTRAINT conversation_pkey PRIMARY KEY (id)
);
CREATE INDEX conversation_app_from_user_idx ON public.conversations USING btree (app_id, from_source, from_end_user_id);



